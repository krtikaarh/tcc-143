{"ast":null,"code":"import axios from 'axios';\n\n// Buat instance axios\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Interceptor: otomatis tambahkan token ke setiap request (kecuali /login dan /register)\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem(\"token\");\n  if (token && !['/login', '/register'].includes(config.url)) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Layanan API untuk catatan\nexport const layananCatatan = {\n  ambilSemuaCatatan: async () => {\n    try {\n      const response = await api.get('/notes');\n      return response.data;\n    } catch (error) {\n      console.error('Error mengambil catatan:', error);\n      throw error;\n    }\n  },\n  ambilCatatanById: async id => {\n    try {\n      const response = await api.get(`/notes/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error mengambil catatan dengan id ${id}:`, error);\n      throw error;\n    }\n  },\n  buatCatatan: async dataCatatan => {\n    try {\n      const response = await api.post('/notes', dataCatatan);\n      return response.data;\n    } catch (error) {\n      console.error('Error membuat catatan:', error);\n      throw error;\n    }\n  },\n  updateCatatan: async (id, dataCatatan) => {\n    try {\n      const response = await api.put(`/notes/${id}`, dataCatatan);\n      return response.data;\n    } catch (error) {\n      console.error(`Error memperbarui catatan dengan id ${id}:`, error);\n      throw error;\n    }\n  },\n  hapusCatatan: async id => {\n    try {\n      const response = await api.delete(`/notes/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error menghapus catatan dengan id ${id}:`, error);\n      throw error;\n    }\n  }\n};\n\n// Autentikasi (tanpa token)\nexport const loginUser = async credentials => {\n  const res = await api.post(\"/login\", credentials);\n  return res.data;\n};\nexport const registerUser = async userData => {\n  const res = await api.post(\"/register\", userData);\n  return res.data;\n};\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","headers","interceptors","request","use","config","token","localStorage","getItem","includes","url","Authorization","error","Promise","reject","layananCatatan","ambilSemuaCatatan","response","get","data","console","ambilCatatanById","id","buatCatatan","dataCatatan","post","updateCatatan","put","hapusCatatan","delete","loginUser","credentials","res","registerUser","userData"],"sources":["C:/Users/Asus/tcc-143/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Buat instance axios\r\nconst api = axios.create({\r\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api',\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Interceptor: otomatis tambahkan token ke setiap request (kecuali /login dan /register)\r\napi.interceptors.request.use((config) => {\r\n  const token = localStorage.getItem(\"token\");\r\n  if (token && !['/login', '/register'].includes(config.url)) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n}, (error) => {\r\n  return Promise.reject(error);\r\n});\r\n\r\n// Layanan API untuk catatan\r\nexport const layananCatatan = {\r\n  ambilSemuaCatatan: async () => {\r\n    try {\r\n      const response = await api.get('/notes');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error mengambil catatan:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  ambilCatatanById: async (id) => {\r\n    try {\r\n      const response = await api.get(`/notes/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(`Error mengambil catatan dengan id ${id}:`, error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  buatCatatan: async (dataCatatan) => {\r\n    try {\r\n      const response = await api.post('/notes', dataCatatan);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error membuat catatan:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  updateCatatan: async (id, dataCatatan) => {\r\n    try {\r\n      const response = await api.put(`/notes/${id}`, dataCatatan);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(`Error memperbarui catatan dengan id ${id}:`, error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  hapusCatatan: async (id) => {\r\n    try {\r\n      const response = await api.delete(`/notes/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(`Error menghapus catatan dengan id ${id}:`, error);\r\n      throw error;\r\n    }\r\n  },\r\n};\r\n\r\n// Autentikasi (tanpa token)\r\nexport const loginUser = async (credentials) => {\r\n  const res = await api.post(\"/login\", credentials);\r\n  return res.data;\r\n};\r\n\r\nexport const registerUser = async (userData) => {\r\n  const res = await api.post(\"/register\", userData);\r\n  return res.data;\r\n};\r\n\r\nexport default api;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}